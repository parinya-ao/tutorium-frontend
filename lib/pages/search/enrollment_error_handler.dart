import 'package:flutter/foundation.dart';

/// Production-grade error tracking for enrollment pipeline
class EnrollmentError {
  final EnrollmentErrorType type;
  final String message;
  final String userMessage;
  final dynamic originalError;
  final StackTrace? stackTrace;
  final Map<String, dynamic> context;

  EnrollmentError({
    required this.type,
    required this.message,
    required this.userMessage,
    this.originalError,
    this.stackTrace,
    Map<String, dynamic>? context,
  }) : context = context ?? {};

  @override
  String toString() {
    return 'EnrollmentError(type: $type, message: $message, context: $context)';
  }
}

enum EnrollmentErrorType {
  // Pre-validation errors
  noLearnerInfo,
  noSelectedSession,
  insufficientBalance,
  teacherCannotEnroll,

  // API errors
  duplicateEnrollment,
  classFull,
  balanceDeductionFailed,
  enrollmentCreationFailed,
  balanceRestoreFailed,

  // Network errors
  networkTimeout,
  networkUnavailable,

  // Unknown
  unknown,
}

/// Logs enrollment pipeline events with structured context
class EnrollmentLogger {
  static const String _prefix = 'üéì [ENROLLMENT]';

  static void step(String step, Map<String, dynamic>? context) {
    if (kDebugMode) {
      final contextStr = context != null ? ' | ${_formatContext(context)}' : '';
      debugPrint('$_prefix ‚úÖ $step$contextStr');
    }
  }

  static void warning(String message, Map<String, dynamic>? context) {
    if (kDebugMode) {
      final contextStr = context != null ? ' | ${_formatContext(context)}' : '';
      debugPrint('$_prefix ‚ö†Ô∏è  $message$contextStr');
    }
  }

  static void error(
    String message, {
    dynamic error,
    StackTrace? stackTrace,
    Map<String, dynamic>? context,
  }) {
    if (kDebugMode) {
      final contextStr = context != null ? ' | ${_formatContext(context)}' : '';
      debugPrint('$_prefix ‚ùå $message$contextStr');
      if (error != null) {
        debugPrint('$_prefix    Error: $error');
      }
      if (stackTrace != null) {
        debugPrint(
          '$_prefix    Stack: ${stackTrace.toString().split('\n').take(3).join('\n')}',
        );
      }
    }
  }

  static void rollback(String action, Map<String, dynamic>? context) {
    if (kDebugMode) {
      final contextStr = context != null ? ' | ${_formatContext(context)}' : '';
      debugPrint('$_prefix üîÑ ROLLBACK: $action$contextStr');
    }
  }

  static String _formatContext(Map<String, dynamic> context) {
    return context.entries.map((e) => '${e.key}=${e.value}').join(', ');
  }
}

/// User-friendly error message generator
class EnrollmentErrorMessages {
  static const Map<EnrollmentErrorType, String> _thaiMessages = {
    EnrollmentErrorType.noLearnerInfo:
        '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà',
    EnrollmentErrorType.noSelectedSession:
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å session ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô',
    EnrollmentErrorType.insufficientBalance:
        '‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô',
    EnrollmentErrorType.teacherCannotEnroll:
        '‡∏Ñ‡∏£‡∏π‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ',
    EnrollmentErrorType.duplicateEnrollment: '‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô session ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß',
    EnrollmentErrorType.classFull: '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß',
    EnrollmentErrorType.balanceDeductionFailed:
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    EnrollmentErrorType.enrollmentCreationFailed:
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß',
    EnrollmentErrorType.balanceRestoreFailed:
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
    EnrollmentErrorType.networkTimeout: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
    EnrollmentErrorType.networkUnavailable:
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï',
    EnrollmentErrorType.unknown: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
  };

  static String getMessage(EnrollmentErrorType type) {
    return _thaiMessages[type] ?? _thaiMessages[EnrollmentErrorType.unknown]!;
  }

  static String getDetailedMessage(EnrollmentError error) {
    final baseMessage = getMessage(error.type);

    // Add context-specific details
    if (error.type == EnrollmentErrorType.insufficientBalance) {
      final balance = error.context['currentBalance'];
      final needed = error.context['neededAmount'];
      if (balance != null && needed != null) {
        return '$baseMessage\n‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: \$${balance.toStringAsFixed(2)} | ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: \$${needed.toStringAsFixed(2)}';
      }
    }

    if (error.type == EnrollmentErrorType.classFull) {
      final current = error.context['currentEnrollment'];
      final limit = error.context['limit'];
      if (current != null && limit != null) {
        return '$baseMessage\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $current/$limit';
      }
    }

    return baseMessage;
  }
}
